// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tu/iot/project/sensordata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tu/iot/project/sensordata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace at {
namespace ac {
namespace tuwien {
namespace iot1718 {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* N2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  N2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* N2C_SensorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* C2N_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2N_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tu_2fiot_2fproject_2fsensordata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tu_2fiot_2fproject_2fsensordata_2eproto() {
  protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tu/iot/project/sensordata.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, params_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::internal_default_instance(),
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_),
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_));
  Command_CommandType_descriptor_ = Command_descriptor_->enum_type(0);
  N2C_descriptor_ = file->message_type(1);
  static const int N2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N2C, roomno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N2C, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N2C, data_),
  };
  N2C_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      N2C_descriptor_,
      N2C::internal_default_instance(),
      N2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N2C, _has_bits_),
      -1,
      -1,
      sizeof(N2C),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(N2C, _internal_metadata_));
  N2C_SensorType_descriptor_ = N2C_descriptor_->enum_type(0);
  C2N_descriptor_ = file->message_type(2);
  static const int C2N_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2N, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2N, command_),
  };
  C2N_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C2N_descriptor_,
      C2N::internal_default_instance(),
      C2N_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2N, _has_bits_),
      -1,
      -1,
      sizeof(C2N),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2N, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tu_2fiot_2fproject_2fsensordata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, Command::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      N2C_descriptor_, N2C::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C2N_descriptor_, C2N::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tu_2fiot_2fproject_2fsensordata_2eproto() {
  Command_default_instance_.Shutdown();
  delete Command_reflection_;
  N2C_default_instance_.Shutdown();
  delete N2C_reflection_;
  C2N_default_instance_.Shutdown();
  delete C2N_reflection_;
}

void protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Command_default_instance_.DefaultConstruct();
  N2C_default_instance_.DefaultConstruct();
  C2N_default_instance_.DefaultConstruct();
  Command_default_instance_.get_mutable()->InitAsDefaultInstance();
  N2C_default_instance_.get_mutable()->InitAsDefaultInstance();
  C2N_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto_once_);
void protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto_once_,
                 &protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto_impl);
}
void protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037tu/iot/project/sensordata.proto\022\024at.ac"
    ".tuwien.iot1718\"z\n\007Command\0227\n\004type\030\001 \002(\016"
    "2).at.ac.tuwien.iot1718.Command.CommandT"
    "ype\022\016\n\006params\030\002 \003(\007\"&\n\013CommandType\022\027\n\023NE"
    "W_UPDATE_INTERVAL\020\001\"\204\001\n\003N2C\022\016\n\006roomNo\030\001 "
    "\002(\007\0222\n\004type\030\002 \002(\0162$.at.ac.tuwien.iot1718"
    ".N2C.SensorType\022\014\n\004data\030\003 \002(\007\"+\n\nSensorT"
    "ype\022\017\n\013TEMPERATURE\020\001\022\014\n\010HUMIDITY\020\002\"H\n\003C2"
    "N\022\021\n\ttimestamp\030\001 \002(\007\022.\n\007command\030\002 \001(\0132\035."
    "at.ac.tuwien.iot1718.Command", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tu/iot/project/sensordata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tu_2fiot_2fproject_2fsensordata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto_once_);
void protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto_once_,
                 &protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tu_2fiot_2fproject_2fsensordata_2eproto {
  StaticDescriptorInitializer_tu_2fiot_2fproject_2fsensordata_2eproto() {
    protobuf_AddDesc_tu_2fiot_2fproject_2fsensordata_2eproto();
  }
} static_descriptor_initializer_tu_2fiot_2fproject_2fsensordata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_CommandType_descriptor_;
}
bool Command_CommandType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Command_CommandType Command::NEW_UPDATE_INTERVAL;
const Command_CommandType Command::CommandType_MIN;
const Command_CommandType Command::CommandType_MAX;
const int Command::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kTypeFieldNumber;
const int Command::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:at.ac.tuwien.iot1718.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:at.ac.tuwien.iot1718.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:at.ac.tuwien.iot1718.Command)
  SharedDtor();
}

void Command::SharedDtor() {
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Command> Command_default_instance_;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:at.ac.tuwien.iot1718.Command)
  type_ = 1;
  params_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:at.ac.tuwien.iot1718.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .at.ac.tuwien.iot1718.Command.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::at::ac::tuwien::iot1718::Command_CommandType_IsValid(value)) {
            set_type(static_cast< ::at::ac::tuwien::iot1718::Command_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_params;
        break;
      }

      // repeated fixed32 params = 2;
      case 2: {
        if (tag == 21) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_params())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:at.ac.tuwien.iot1718.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:at.ac.tuwien.iot1718.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:at.ac.tuwien.iot1718.Command)
  // required .at.ac.tuwien.iot1718.Command.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated fixed32 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:at.ac.tuwien.iot1718.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:at.ac.tuwien.iot1718.Command)
  // required .at.ac.tuwien.iot1718.Command.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated fixed32 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:at.ac.tuwien.iot1718.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:at.ac.tuwien.iot1718.Command)
  size_t total_size = 0;

  // required .at.ac.tuwien.iot1718.Command.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated fixed32 params = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->params_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->params_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:at.ac.tuwien.iot1718.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:at.ac.tuwien.iot1718.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:at.ac.tuwien.iot1718.Command)
    UnsafeMergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:at.ac.tuwien.iot1718.Command)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Command::UnsafeMergeFrom(const Command& from) {
  GOOGLE_DCHECK(&from != this);
  params_.UnsafeMergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:at.ac.tuwien.iot1718.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:at.ac.tuwien.iot1718.Command)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(type_, other->type_);
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required .at.ac.tuwien.iot1718.Command.CommandType type = 1;
bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_type() {
  type_ = 1;
  clear_has_type();
}
::at::ac::tuwien::iot1718::Command_CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.Command.type)
  return static_cast< ::at::ac::tuwien::iot1718::Command_CommandType >(type_);
}
void Command::set_type(::at::ac::tuwien::iot1718::Command_CommandType value) {
  assert(::at::ac::tuwien::iot1718::Command_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.Command.type)
}

// repeated fixed32 params = 2;
int Command::params_size() const {
  return params_.size();
}
void Command::clear_params() {
  params_.Clear();
}
::google::protobuf::uint32 Command::params(int index) const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.Command.params)
  return params_.Get(index);
}
void Command::set_params(int index, ::google::protobuf::uint32 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.Command.params)
}
void Command::add_params(::google::protobuf::uint32 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:at.ac.tuwien.iot1718.Command.params)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Command::params() const {
  // @@protoc_insertion_point(field_list:at.ac.tuwien.iot1718.Command.params)
  return params_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Command::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:at.ac.tuwien.iot1718.Command.params)
  return &params_;
}

inline const Command* Command::internal_default_instance() {
  return &Command_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* N2C_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return N2C_SensorType_descriptor_;
}
bool N2C_SensorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const N2C_SensorType N2C::TEMPERATURE;
const N2C_SensorType N2C::HUMIDITY;
const N2C_SensorType N2C::SensorType_MIN;
const N2C_SensorType N2C::SensorType_MAX;
const int N2C::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int N2C::kRoomNoFieldNumber;
const int N2C::kTypeFieldNumber;
const int N2C::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

N2C::N2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:at.ac.tuwien.iot1718.N2C)
}

void N2C::InitAsDefaultInstance() {
}

N2C::N2C(const N2C& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:at.ac.tuwien.iot1718.N2C)
}

void N2C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roomno_, 0, reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&roomno_) + sizeof(data_));
  type_ = 1;
}

N2C::~N2C() {
  // @@protoc_insertion_point(destructor:at.ac.tuwien.iot1718.N2C)
  SharedDtor();
}

void N2C::SharedDtor() {
}

void N2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* N2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return N2C_descriptor_;
}

const N2C& N2C::default_instance() {
  protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<N2C> N2C_default_instance_;

N2C* N2C::New(::google::protobuf::Arena* arena) const {
  N2C* n = new N2C;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void N2C::Clear() {
// @@protoc_insertion_point(message_clear_start:at.ac.tuwien.iot1718.N2C)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(N2C, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<N2C*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(roomno_, data_);
    type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool N2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:at.ac.tuwien.iot1718.N2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 roomNo = 1;
      case 1: {
        if (tag == 13) {
          set_has_roomno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::at::ac::tuwien::iot1718::N2C_SensorType_IsValid(value)) {
            set_type(static_cast< ::at::ac::tuwien::iot1718::N2C_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // required fixed32 data = 3;
      case 3: {
        if (tag == 29) {
         parse_data:
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:at.ac.tuwien.iot1718.N2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:at.ac.tuwien.iot1718.N2C)
  return false;
#undef DO_
}

void N2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:at.ac.tuwien.iot1718.N2C)
  // required fixed32 roomNo = 1;
  if (has_roomno()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->roomno(), output);
  }

  // required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required fixed32 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:at.ac.tuwien.iot1718.N2C)
}

::google::protobuf::uint8* N2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:at.ac.tuwien.iot1718.N2C)
  // required fixed32 roomNo = 1;
  if (has_roomno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->roomno(), target);
  }

  // required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required fixed32 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:at.ac.tuwien.iot1718.N2C)
  return target;
}

size_t N2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:at.ac.tuwien.iot1718.N2C)
  size_t total_size = 0;

  if (has_roomno()) {
    // required fixed32 roomNo = 1;
    total_size += 1 + 4;
  }

  if (has_type()) {
    // required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_data()) {
    // required fixed32 data = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t N2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:at.ac.tuwien.iot1718.N2C)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed32 roomNo = 1;
    total_size += 1 + 4;

    // required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required fixed32 data = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void N2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:at.ac.tuwien.iot1718.N2C)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const N2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const N2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:at.ac.tuwien.iot1718.N2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:at.ac.tuwien.iot1718.N2C)
    UnsafeMergeFrom(*source);
  }
}

void N2C::MergeFrom(const N2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:at.ac.tuwien.iot1718.N2C)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void N2C::UnsafeMergeFrom(const N2C& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomno()) {
      set_roomno(from.roomno());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void N2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:at.ac.tuwien.iot1718.N2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void N2C::CopyFrom(const N2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:at.ac.tuwien.iot1718.N2C)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool N2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void N2C::Swap(N2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void N2C::InternalSwap(N2C* other) {
  std::swap(roomno_, other->roomno_);
  std::swap(type_, other->type_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata N2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = N2C_descriptor_;
  metadata.reflection = N2C_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// N2C

// required fixed32 roomNo = 1;
bool N2C::has_roomno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void N2C::set_has_roomno() {
  _has_bits_[0] |= 0x00000001u;
}
void N2C::clear_has_roomno() {
  _has_bits_[0] &= ~0x00000001u;
}
void N2C::clear_roomno() {
  roomno_ = 0u;
  clear_has_roomno();
}
::google::protobuf::uint32 N2C::roomno() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.N2C.roomNo)
  return roomno_;
}
void N2C::set_roomno(::google::protobuf::uint32 value) {
  set_has_roomno();
  roomno_ = value;
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.N2C.roomNo)
}

// required .at.ac.tuwien.iot1718.N2C.SensorType type = 2;
bool N2C::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void N2C::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void N2C::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void N2C::clear_type() {
  type_ = 1;
  clear_has_type();
}
::at::ac::tuwien::iot1718::N2C_SensorType N2C::type() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.N2C.type)
  return static_cast< ::at::ac::tuwien::iot1718::N2C_SensorType >(type_);
}
void N2C::set_type(::at::ac::tuwien::iot1718::N2C_SensorType value) {
  assert(::at::ac::tuwien::iot1718::N2C_SensorType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.N2C.type)
}

// required fixed32 data = 3;
bool N2C::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void N2C::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void N2C::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void N2C::clear_data() {
  data_ = 0u;
  clear_has_data();
}
::google::protobuf::uint32 N2C::data() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.N2C.data)
  return data_;
}
void N2C::set_data(::google::protobuf::uint32 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.N2C.data)
}

inline const N2C* N2C::internal_default_instance() {
  return &N2C_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2N::kTimestampFieldNumber;
const int C2N::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2N::C2N()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:at.ac.tuwien.iot1718.C2N)
}

void C2N::InitAsDefaultInstance() {
  command_ = const_cast< ::at::ac::tuwien::iot1718::Command*>(
      ::at::ac::tuwien::iot1718::Command::internal_default_instance());
}

C2N::C2N(const C2N& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:at.ac.tuwien.iot1718.C2N)
}

void C2N::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  timestamp_ = 0u;
}

C2N::~C2N() {
  // @@protoc_insertion_point(destructor:at.ac.tuwien.iot1718.C2N)
  SharedDtor();
}

void C2N::SharedDtor() {
  if (this != &C2N_default_instance_.get()) {
    delete command_;
  }
}

void C2N::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2N::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2N_descriptor_;
}

const C2N& C2N::default_instance() {
  protobuf_InitDefaults_tu_2fiot_2fproject_2fsensordata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<C2N> C2N_default_instance_;

C2N* C2N::New(::google::protobuf::Arena* arena) const {
  C2N* n = new C2N;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2N::Clear() {
// @@protoc_insertion_point(message_clear_start:at.ac.tuwien.iot1718.C2N)
  if (_has_bits_[0 / 32] & 3u) {
    timestamp_ = 0u;
    if (has_command()) {
      if (command_ != NULL) command_->::at::ac::tuwien::iot1718::Command::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C2N::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:at.ac.tuwien.iot1718.C2N)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 timestamp = 1;
      case 1: {
        if (tag == 13) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional .at.ac.tuwien.iot1718.Command command = 2;
      case 2: {
        if (tag == 18) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:at.ac.tuwien.iot1718.C2N)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:at.ac.tuwien.iot1718.C2N)
  return false;
#undef DO_
}

void C2N::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:at.ac.tuwien.iot1718.C2N)
  // required fixed32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp(), output);
  }

  // optional .at.ac.tuwien.iot1718.Command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:at.ac.tuwien.iot1718.C2N)
}

::google::protobuf::uint8* C2N::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:at.ac.tuwien.iot1718.C2N)
  // required fixed32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp(), target);
  }

  // optional .at.ac.tuwien.iot1718.Command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:at.ac.tuwien.iot1718.C2N)
  return target;
}

size_t C2N::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:at.ac.tuwien.iot1718.C2N)
  size_t total_size = 0;

  // required fixed32 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 + 4;
  }
  // optional .at.ac.tuwien.iot1718.Command command = 2;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->command_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2N::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:at.ac.tuwien.iot1718.C2N)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C2N* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2N>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:at.ac.tuwien.iot1718.C2N)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:at.ac.tuwien.iot1718.C2N)
    UnsafeMergeFrom(*source);
  }
}

void C2N::MergeFrom(const C2N& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:at.ac.tuwien.iot1718.C2N)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void C2N::UnsafeMergeFrom(const C2N& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_command()) {
      mutable_command()->::at::ac::tuwien::iot1718::Command::MergeFrom(from.command());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void C2N::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:at.ac.tuwien.iot1718.C2N)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2N::CopyFrom(const C2N& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:at.ac.tuwien.iot1718.C2N)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool C2N::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  return true;
}

void C2N::Swap(C2N* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2N::InternalSwap(C2N* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(command_, other->command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2N::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2N_descriptor_;
  metadata.reflection = C2N_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2N

// required fixed32 timestamp = 1;
bool C2N::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C2N::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void C2N::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void C2N::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 C2N::timestamp() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.C2N.timestamp)
  return timestamp_;
}
void C2N::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:at.ac.tuwien.iot1718.C2N.timestamp)
}

// optional .at.ac.tuwien.iot1718.Command command = 2;
bool C2N::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C2N::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
void C2N::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
void C2N::clear_command() {
  if (command_ != NULL) command_->::at::ac::tuwien::iot1718::Command::Clear();
  clear_has_command();
}
const ::at::ac::tuwien::iot1718::Command& C2N::command() const {
  // @@protoc_insertion_point(field_get:at.ac.tuwien.iot1718.C2N.command)
  return command_ != NULL ? *command_
                         : *::at::ac::tuwien::iot1718::Command::internal_default_instance();
}
::at::ac::tuwien::iot1718::Command* C2N::mutable_command() {
  set_has_command();
  if (command_ == NULL) {
    command_ = new ::at::ac::tuwien::iot1718::Command;
  }
  // @@protoc_insertion_point(field_mutable:at.ac.tuwien.iot1718.C2N.command)
  return command_;
}
::at::ac::tuwien::iot1718::Command* C2N::release_command() {
  // @@protoc_insertion_point(field_release:at.ac.tuwien.iot1718.C2N.command)
  clear_has_command();
  ::at::ac::tuwien::iot1718::Command* temp = command_;
  command_ = NULL;
  return temp;
}
void C2N::set_allocated_command(::at::ac::tuwien::iot1718::Command* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
  // @@protoc_insertion_point(field_set_allocated:at.ac.tuwien.iot1718.C2N.command)
}

inline const C2N* C2N::internal_default_instance() {
  return &C2N_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace iot1718
}  // namespace tuwien
}  // namespace ac
}  // namespace at

// @@protoc_insertion_point(global_scope)
